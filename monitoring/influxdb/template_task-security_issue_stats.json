{
  "meta": {
    "version": "1",
    "type": "task",
    "name": "sec-stats-Template",
    "description": "template created from task: sec-stats"
  },
  "content": {
    "data": {
      "type": "task",
      "attributes": {
        "status": "active",
        "name": "sec-stats",
        "flux": "import \"experimental\"\nimport \"influxdata/influxdb/secrets\"\nimport \"slack\"\n\nwebhook_url = secrets.get(key: \"SECRETKEYNAME\")\nendpoint = slack.endpoint(url: webhook_url)\nmapFnCrit = (r) =>\n    ({\n        text:\n            if r._value == 1 then\n                \"${r._value} open critical security issue\"\n            else\n                \"${r._value} open critical security issues\",\n        color: \"danger\",\n        channel: \"\",\n    })\ntoSlackCrit = endpoint(mapFn: mapFnCrit)\nmapFnHigh = (r) =>\n    ({\n        text: if r._value == 1 then \"${r._value} open high security issue\" else \"${r._value} open high security issues\",\n        color: \"danger\",\n        channel: \"\",\n    })\ntoSlackHigh = endpoint(mapFn: mapFnHigh)\n\ncritlvl = 0\nhighlvl = 0\n\n// grab everything from the last 30 days and filter down once so we don't\n// have to keep doing it. We'll filter down more as we go.\ndata =\n    from(bucket: \"sec-stats\")\n        |> range(start: -30d, stop: now())\n        |> filter(fn: (r) => r[\"_measurement\"] == \"cveLog\" and r[\"_field\"] == \"id\")\n\ngetLatest = (tables=<-) => {\n    row =\n        tables\n            |> group(columns: [\"_time\"])\n            |> aggregateWindow(every: 1d, createEmpty: false, fn: count)\n            |> group(columns: [\"_time\"], mode: \"except\")\n            |> last()\n            |> limit(n: 1)\n            // we only have 1 row at this point, but fn must be specified\n            |> findRecord(fn: (key) => true, idx: 0)\n\n    return row._time\n}\n\nlatest =\n    data\n        |> getLatest()\n\n// check for statuses for the 24 hour period before time of the latest entry\ncheckStatus = (tables=<-, priority, threshold) =>\n    tables\n        |> range(start: experimental.subDuration(d: 24h, from: latest), stop: latest)\n        |> filter(fn: (r) => r[\"priority\"] == priority)\n        |> group(columns: [\"priority\"])\n        |> window(every: 1d)\n        |> unique()\n        |> aggregateWindow(every: 1d, createEmpty: false, fn: count)\n        |> last()\n        |> limit(n: 1)\n        |> filter(fn: (r) => r[\"_value\"] > threshold)\n\ncrit =\n    data\n        |> checkStatus(priority: \"critical\", threshold: critlvl)\n        |> toSlackCrit()\n        |> yield(name: \"critical\")\n\nhigh =\n    data\n        |> checkStatus(priority: \"high\", threshold: highlvl)\n        |> toSlackHigh()\n        |> yield(name: \"high\")",
        "every": "1d"
      },
      "relationships": {
        "label": {
          "data": []
        }
      }
    },
    "included": []
  },
  "labels": []
}
