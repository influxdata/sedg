#!/usr/bin/env python3

import argparse
import sys
import textwrap
from typing import Dict, List

from cvelib.cve import checkSyntax, _getCVEPaths, CVE
from cvelib.common import (
    getConfigCveDataPaths,
    getConfigCompatUbuntu,
)
from cvelib.report import (
    getHumanReport,
    getHumanSoftwareInfo,
    getHumanSummary,
    getHumanTodo,
    getInfluxDBLineProtocol,
)


def main():
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        prog="cve-report",
        description="Generate reports on security issues",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent(
            """\
Example usage:

# Status for open and closed issues
$ cve-report

# List open issues, by software and priority
$ cve-report --output-sw

# Todo list for software by combined priority
$ cve-report --output-todolist

# Summary report
$ cve-report --output-summary

# Summary report on packages listed in /path/to/list (one package per line)
$ cve-report --output-summary=/path/to/list
        """
        ),
    )
    parser.add_argument(
        "--output-sw",
        dest="output_sw",
        help="output software info in human-readable form",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-summary",
        dest="output_summary",
        help="output summary in human-readable form. Optional PATH to limit to package list",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-summary-with-closed",
        dest="output_summary_with_closed",
        help="output summary in human-readable form. Optional PATH to limit to package list. Also show closed issues",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-todolist",
        dest="output_todolist",
        help="output todo list in human-readable form",
        action="store_true",
    )
    parser.add_argument(
        "--output-influxdb",
        dest="output_influxdb",
        help="output InfluxDB line protocol. Optional PATH to limit to package list",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-influxdb-starttime",
        dest="output_influxdb_starttime",
        type=int,
        help="Use TIME as base start time for InfluxDB line protocol",
        default=None,
    )
    args: argparse.Namespace = parser.parse_args()

    cveDirs: Dict[str, str] = getConfigCveDataPaths()
    compat: bool = getConfigCompatUbuntu()

    # First, check the syntax of our CVEs
    checkSyntax(cveDirs, compat, untriagedOk=True)

    # Gather the CVEs
    cves: List[CVE] = []
    cve_fn: str
    for cve_fn in _getCVEPaths(cveDirs):
        cves.append(CVE(fn=cve_fn, compatUbuntu=compat, untriagedOk=True))

    # send to a report
    if args.output_influxdb is not None:
        getInfluxDBLineProtocol(
            cves, args.output_influxdb, args.output_influxdb_starttime
        )
    elif args.output_todolist:
        getHumanTodo(cves)
    elif args.output_summary is not None:
        getHumanSummary(cves, args.output_summary, closed=False)
    elif args.output_summary_with_closed is not None:
        getHumanSummary(cves, args.output_summary, closed=True)
    elif args.output_sw is not None:
        getHumanSoftwareInfo(cves, args.output_sw)
    else:
        getHumanReport(cves)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
