#!/usr/bin/env python3

import argparse
import sys
import time

from cvelib.cve import checkSyntax, _getCVEPaths, CVE
from cvelib.common import (
    cve_priorities,
    getConfigCveDataPaths,
    getConfigCompatUbuntu,
)


def _readStatsUniqueCVEs(cves, filter_status=["needs-triage", "needed", "pending"]):
    stats = {}
    for cve in cves:
        for pkg in cve.pkgs:
            priority = cve.priority
            if pkg.software in pkg.priorities:
                priority = pkg.priorities[pkg.software]

            if pkg.status in filter_status:
                if pkg.software not in stats:
                    stats[pkg.software] = {}
                    for pri in cve_priorities:
                        stats[pkg.software][pri] = 0

                stats[pkg.software][priority] += 1
                # only count an open CVE once per software/priority
                continue

    return stats


def getHumanReportOpenByPkgPriority(stats):
    print("{pkg:20} {critical:>10s} {high:>10s} {medium:>10s} {low:>10s} {negligible:>10s}".format(
        pkg="Package",
        critical="Critical",
        high="High",
        medium="Medium",
        low="Low",
        negligible="Negligible")
    )

    table_f = "{pkg:20s} {critical:>10d} {high:>10d} {medium:>10d} {low:>10d} {negligible:>10d}".format
    totals = {}
    for pri in cve_priorities:
        totals[pri] = 0

    for p in sorted(stats):
        print(table_f(
            pkg=p,
            critical=stats[p]['critical'],
            high=stats[p]['high'],
            medium=stats[p]['medium'],
            low=stats[p]['low'],
            negligible=stats[p]['negligible'],)
        )
        for pri in cve_priorities:
            totals[pri] += stats[p][pri]

    print(table_f(
        pkg="Total:",
        critical=totals['critical'],
        high=totals['high'],
        medium=totals['medium'],
        low=totals['low'],
        negligible=totals['negligible'],)
    )


def getHumanReport(cves):
    stats_open = _readStatsUniqueCVEs(cves)
    print("# Open issues by software")
    getHumanReportOpenByPkgPriority(stats_open)

    print("\n# Closed issues by software")
    stats_closed = _readStatsUniqueCVEs(cves, filter_status=["released"])
    getHumanReportOpenByPkgPriority(stats_closed)


# line protocol
# We plan to query on priority, status and where so put them as tags
#
#   <measurement>,priority=X,status=X,product=X id=X software=X
#
# Note: the concept of 'team' will be handled within the flux
def _readStatsLineProtocol(cves, measurement="cve_stats", filter_status=["needs-triage", "needed", "pending"]):
    stats = []
    lp_f = '{measurement},priority={priority},status={status},product={product} id="{id}",software="{software}" {timestamp}'.format
    for cve in cves:
        for pkg in cve.pkgs:
            priority = cve.priority
            if pkg.software in pkg.priorities:
                priority = pkg.priorities[pkg.software]

            if pkg.status not in filter_status:
                continue

            stats.append(lp_f(
                measurement=measurement,
                priority=priority,
                status=pkg.status,
                product=pkg.product,
                id=cve.candidate,
                software=pkg.software,
                timestamp=int(time.time_ns()),
            ))

    return stats


def getInfluxDBLineProtocol(cves):
    stats_open = _readStatsLineProtocol(cves)
    for s in stats_open:
        print(s)


def main():
    parser = argparse.ArgumentParser(
        prog="cve-report",
        description="Generate reports on security issues",
    )

    parser.add_argument(
        "--output-influxdb",
        dest="output_influxdb",
        help="output InfluxDB line protocol",
        action="store_true",
    )
    args = parser.parse_args()

    cveDirs = getConfigCveDataPaths()
    compat = getConfigCompatUbuntu()

    # First, check the syntax of our CVEs
    checkSyntax(cveDirs, compat, untriagedOk=True)

    # Gather the CVEs
    cves = []
    for cve_fn in _getCVEPaths(cveDirs):
        cves.append(CVE(fn=cve_fn, compatUbuntu=compat, untriagedOk=True))

    # send to a report
    if args.output_influxdb:
        getInfluxDBLineProtocol(cves)
    else:
        getHumanReport(cves)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
