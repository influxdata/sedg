#!/usr/bin/env python3
#
# Copyright (c) 2023 InfluxData
# Author: Jamie Strandboge <jamie@influxdata.com>
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without
# limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice
# shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
# ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import argparse
import sys
import textwrap
from typing import Dict, List

from cvelib.cve import CVE, collectCVEData
from cvelib.common import (
    getConfigCveDataPaths,
    getConfigCompatUbuntu,
)
from cvelib.report import (
    getHumanReport,
    getHumanSoftwareInfo,
    getHumanSummary,
    getHumanSummaryGHAS,
    getHumanTodo,
    getInfluxDBLineProtocol,
    ReportOutput,
)


def main():
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        prog="cve-report",
        description="Generate reports on security issues",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent(
            """\
Example usage:

# Status for open and closed issues
$ cve-report

# Status for open and closed issues matching 'git/myorg' and oci/dockerhub
$ cve-report --filter-product=git/myorg,oci/dockerhub

# List open issues, by software and priority
$ cve-report --output-sw

# Todo list for software by combined priority
$ cve-report --output-todolist

# Summary report
$ cve-report --output-summary

# Summary report for high and critical
$ cve-report --output-summary --filter-priority=high,critical

# Summary report for specific tags
$ cve-report --output-summary --filter-tag=apparmor,pie

# Summary report on packages listed in /path/to/list (one package per line)
$ cve-report --output-summary=/path/to/list
        """
        ),
    )
    parser.add_argument(
        "--output-ghas",
        dest="output_ghas",
        help="output GitHub Advanced Security in human-readable form. Shows open issues",
        action="store_true",
    )
    parser.add_argument(
        "--output-ghas-closed",
        dest="output_ghas_closed",
        help="output GitHub Advanced Security in human-readable form. Shows closed issues",
        action="store_true",
    )
    parser.add_argument(
        "--output-ghas-all",
        dest="output_ghas_all",
        help="output GitHub Advanced Security in human-readable form. Shows all issues",
        action="store_true",
    )
    parser.add_argument(
        "--output-influxdb",
        dest="output_influxdb",
        help="output InfluxDB line protocol. Optional PATH to limit to package list",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-influxdb-starttime",
        dest="output_influxdb_starttime",
        type=int,
        help="Use TIME as base start time for InfluxDB line protocol",
        default=None,
    )
    parser.add_argument(
        "--output-sw",
        dest="output_sw",
        help="output software info in human-readable form",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-summary",
        dest="output_summary",
        help="output summary in human-readable form. Optional PATH to limit to package list. Shows open issues",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-summary-closed",
        dest="output_summary_closed",
        help="output summary in human-readable form. Optional PATH to limit to package list. Shows closed issues",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-summary-all",
        dest="output_summary_all",
        help="output summary in human-readable form. Optional PATH to limit to package list. Shows all issues",
        type=str,
        nargs="?",
        const="",
    )
    parser.add_argument(
        "--output-todolist",
        dest="output_todolist",
        help="output todo list in human-readable form",
        action="store_true",
    )
    parser.add_argument(
        "--filter-product",
        dest="filter_product",
        help="Comma-separated list of PRODUCTs to limit by (eg 'git/org')",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--filter-priority",
        dest="filter_priority",
        help="Comma-separated list of PRIORITYs to limit by (eg 'critical,high' or '-negligible')",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--filter-tag",
        dest="filter_tag",
        help="Comma-separated list of TAGs to limit by (eg 'apparmor,pie' or '-limit-report')",
        type=str,
        default=None,
    )
    args: argparse.Namespace = parser.parse_args()

    cveDirs: Dict[str, str] = getConfigCveDataPaths()
    compat: bool = getConfigCompatUbuntu()

    # XXX: skipping this makes things faster, but it is nice to have...
    # First, check the syntax of our CVEs
    # checkSyntax(cveDirs, compat, untriagedOk=True)

    # Gather the CVEs
    filter_status = "needs-triage,needed,pending,released"
    if args.output_ghas or args.output_ghas_closed or args.output_ghas_all:
        # GHAS might use any number of package statuses
        filter_status = None
    elif (
        args.output_influxdb is not None
        or args.output_todolist
        or args.output_summary is not None
        or args.output_sw is not None
    ):
        filter_status = "needs-triage,needed,pending"

    cves: List[CVE] = collectCVEData(
        cveDirs,
        compat,
        untriagedOk=True,
        filter_status=filter_status,
        filter_product=args.filter_product,
        filter_priority=args.filter_priority,
        filter_tag=args.filter_tag,
    )

    # send to a report
    if args.output_ghas:
        getHumanSummaryGHAS(cves, report_output=ReportOutput.OPEN)
    elif args.output_ghas_closed:
        getHumanSummaryGHAS(cves, report_output=ReportOutput.CLOSED)
    elif args.output_ghas_all:
        getHumanSummaryGHAS(cves, report_output=ReportOutput.BOTH)
    elif args.output_influxdb is not None:
        getInfluxDBLineProtocol(
            cves, args.output_influxdb, args.output_influxdb_starttime
        )
    elif args.output_todolist:
        getHumanTodo(cves)
    elif args.output_summary is not None:
        getHumanSummary(cves, args.output_summary, report_output=ReportOutput.OPEN)
    elif args.output_summary_closed is not None:
        getHumanSummary(cves, args.output_summary, report_output=ReportOutput.CLOSED)
    elif args.output_summary_all is not None:
        getHumanSummary(cves, args.output_summary, report_output=ReportOutput.BOTH)
    elif args.output_sw is not None:
        getHumanSoftwareInfo(cves, args.output_sw)
    else:
        getHumanReport(cves)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
