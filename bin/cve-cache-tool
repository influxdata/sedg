#!/usr/bin/env python3

import argparse
import os
import sys

import cvelib.cache
import cvelib.common


# TODO: move this out
def getConfigCveData():
    (config, configFilePath) = cvelib.common.readConfig()
    if "Locations" in config and "cve-data" in config["Locations"]:
        path = config["Locations"]["cve-data"]
        if not os.path.isdir(path):
            cvelib.common.error(
                "Please configure %s to\nset 'cve-data' in "
                "'[Locations]' to a valid path" % configFilePath
            )

        return config["Locations"]["cve-data"]

    cvelib.common.error(
        "Please configure %s to\nset 'cve-data' in "
        "'[Locations]' to a valid path" % configFilePath
    )


def main():
    parser = argparse.ArgumentParser(
        prog="cve-add",
        description="Add CVE to tracker",
    )
    parser.add_argument(
        "-f",
        "--file",
        dest="fn",
        help="path to database",
        metavar="FILE",
    )
    parser.add_argument(
        "--update",
        dest="update",
        help="Update the cache",
        action="store_true",
    )
    parser.add_argument(
        "--dump",
        dest="dump",
        help="Dump the cache",
        action="store_true",
    )
    parser.add_argument(
        "--dump-sql",
        dest="dumpsql",
        help="Dump the cache as SQL",
        action="store_true",
    )
    args = parser.parse_args()
    if args.fn:
        fn = args.fn
    else:
        fn = os.path.join(getConfigCveData(), "cache.sqlite")

    if not os.path.exists(fn):
        cvelib.common.msg("Creating '%s'" % fn)
    cache = cvelib.cache.CveCache(fn)

    if args.update:
        cache.update(
            cvelib.common.getConfigCveDataPaths(), cvelib.common.getConfigCompatUbuntu()
        )
    elif args.dumpsql:
        cache._dbDump()
    elif args.dump:
        cache.dump(cvelib.common.getConfigCompatUbuntu())
    else:
        cur = cache._dbConnect()
        if cur is not None:
            cvelib.common.msg("Loaded '%s'" % fn)
        cur.close()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
