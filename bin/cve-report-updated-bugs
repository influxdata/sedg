#!/usr/bin/env python3

import argparse
import os
import pathlib
import textwrap
from typing import Dict, List

from cvelib.cve import checkSyntax, CVE, collectCVEData
from cvelib.common import (
    getConfigCveDataPaths,
    getConfigCompatUbuntu,
    error,
)
from cvelib.report import (
    getGHAlertsStatusReport,
    getGHAlertsUpdatedReport,
    getMissingReport,
    getUpdatedReport,
)


def main() -> None:
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        prog="cve-report-updated-bugs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Generate reports on security issue bug updates",
        epilog=textwrap.dedent(
            """\
Example usage:

  # first export a GitHub Personal Access Token that can read issues:
  $  export GHTOKEN=...

  # Show issues that are referenced in open CVE data that have been
  # updated since last week
  $ cve-report-updated-bugs --show-updated \\
      --gh-org foo --since $(date --date "7 days ago" "+%s")

  # Show list of issues for specific repos in an org with different
  # labels
  $ cve-report-updated-bugs --show-missing \\
      --gh-org foo \\
      --gh-labels="bar:baz" \\
      --gh-repos=norg,corge,qux

  # Show missing GitHub dependabot alerts
  $ cve-report-updated-bugs --gh-show-alerts \\
      --gh-org foo \\
      --since-stamp /path/to/stamp
        """
        ),
    )
    parser.add_argument(
        "--show-combined",
        dest="show_combined",
        help="show dependabot, missing and updates",
        action="store_true",
    )
    parser.add_argument(
        "--show-missing",
        dest="show_missing",
        help="show URLs missing from CVE info since --since TIME",
        action="store_true",
    )
    parser.add_argument(
        "--show-updated",
        dest="show_updated",
        help="show URLs that have been updated since --since TIME",
        action="store_true",
    )
    parser.add_argument(
        "--gh-org",
        dest="gh_org",
        type=str,
        help="GitHub URLs must belong to ORG",
        default=None,
    )
    parser.add_argument(
        "--gh-repos",
        dest="gh_repos",
        type=str,
        help="Comma-separated list of GitHub repos",
        default=None,
    )
    parser.add_argument(
        "--gh-excluded-repos",
        dest="gh_excluded_repos",
        type=str,
        help="Comma-separated list of GitHub repos",
        default=None,
    )
    # The GitHub API uses:
    #   &labels=foo     - issue has 'foo' label
    #   &labels=bar,baz - issue has 'bar' and 'baz' labels
    #
    # --gh-labels uses ',' for AND and ':' for OR such that
    #   foo             - show issues with 'foo' label
    #   foo:bar         - show issues with 'foo' or 'bar' label
    #   foo:bar,baz     - show issues with 'foo' label or 'bar' and 'baz labels
    parser.add_argument(
        "--gh-labels",
        dest="gh_labels",
        type=str,
        help="Colon-separated list of GitHub labels (use commans for ANDed labels)",
        default=None,
    )
    # Consider that --gh-labels=foo returns all issues with the label 'foo'.
    # Sometimes it is useful to list all issues with the label foo but without
    # label 'bar'. Use --gh-labels=foo --gh-skip-labels=bar
    parser.add_argument(
        "--gh-skip-labels",
        dest="gh_skip_labels",
        type=str,
        help="Colon-separated list of GitHub labels to skip issues when present",
        default=None,
    )
    parser.add_argument(
        "--gh-show-alerts-repo-status",
        dest="gh_show_alerts_repo_status",
        help="show status of GitHub vulnerability alerts (dependabot) by repo",
        action="store_true",
    )
    parser.add_argument(
        "--gh-show-alerts",
        dest="gh_show_alerts",
        help="show GitHub vulnerability alerts (dependabot)",
        action="store_true",
    )
    parser.add_argument(
        "--gh-show-alerts-templates",
        dest="gh_show_alerts_templates",
        help="show GitHub vulnerability alerts (dependabot)",
        action="store_true",
    )
    parser.add_argument(
        "--since",
        dest="since",
        type=int,
        help="Report bug updates since TIME (in epoch seconds)",
        default=0,
    )
    parser.add_argument(
        "--since-stamp",
        dest="since_stamp",
        type=str,
        help="Report bug updates since last TIME based on stamp file",
        default=None,
    )

    args: argparse.Namespace = parser.parse_args()

    if args.show_combined:
        args.show_updated = True
        args.show_missing = True
        args.gh_show_alerts = True

    if (
        not args.show_missing
        and not args.show_updated
        and not args.gh_show_alerts
        and not args.gh_show_alerts_repo_status
    ):
        error(
            "Please specify one of --show-missing, --show-updated, --gh-show-alerts or --gh-show-alerts-repo-status"
        )
    elif (args.show_updated or args.show_missing or args.gh_show_alerts) and (
        args.since == 0 and args.since_stamp is None
    ):
        error(
            "Please specify --since and/or --since-stamp with --show-missing/--show-updated/--gh-show-alerts"
        )
    elif args.gh_show_alerts_templates and not args.gh_show_alerts:
        error("Please specify --gh-show-alerts with --gh-show-alerts-templates")

    if "GHTOKEN" not in os.environ:
        error("Please export GitHub personal access token as GHTOKEN")

    cveDirs: Dict[str, str] = getConfigCveDataPaths()
    compat: bool = getConfigCompatUbuntu()

    # First, check the syntax of our CVEs
    checkSyntax(cveDirs, compat, untriagedOk=True)

    # Gather the CVEs (including retired/ and ignored/)
    cves: List[CVE] = collectCVEData(cveDirs, compat, untriagedOk=True)

    if args.show_missing or args.show_updated or args.gh_show_alerts:
        # Allow for specifying --since and --since-stamp together. Eg:
        #   --since alone just sets 'since' with no stamp file
        #   --since-stamp alone where stamp file doesn't exists defaults to '0'
        #     then creates the stamp file
        #   --since-stamp alone where stamp file exists uses mtime of stamp
        #     file then updates the stamp file
        #   --since with --since-stamp sets 'since' to --since and then updates
        #     stamp file
        since: int = args.since
        if (
            args.since == 0
            and args.since_stamp is not None
            and os.path.exists(args.since_stamp)
        ):
            since = int(os.path.getmtime(args.since_stamp))

        repos: List[str] = []
        if args.gh_repos is not None:
            repos = args.gh_repos.split(",")

        excluded_repos: List[str] = []
        if args.gh_excluded_repos is not None:
            excluded_repos = args.gh_excluded_repos.split(",")

        if args.gh_show_alerts:
            if args.show_combined:
                print("# Alerts")

            getGHAlertsUpdatedReport(
                cves,
                args.gh_org,
                since=since,
                repos=repos,
                excluded_repos=excluded_repos,
                with_templates=args.gh_show_alerts_templates,
            )

        if args.show_updated:
            if args.show_combined:
                print("\n# Updates")
            getUpdatedReport(cves, args.gh_org, since=since)

        if args.show_missing:
            if args.show_combined:
                print("\n# Missing")

            labels: List[str] = []
            if args.gh_labels is not None:
                labels = args.gh_labels.split(":")
            skip_labels: List[str] = []
            if args.gh_skip_labels is not None:
                skip_labels = args.gh_skip_labels.split(":")
            getMissingReport(
                cves,
                args.gh_org,
                repos=repos,
                excluded_repos=excluded_repos,
                labels=labels,
                skip_labels=skip_labels,
                since=since,
            )

        if args.since_stamp is not None:
            pathlib.Path(args.since_stamp).touch()

    if args.gh_show_alerts_repo_status:
        repos: List[str] = []
        if args.gh_repos is not None:
            repos = args.gh_repos.split(",")

        excluded_repos: List[str] = []
        if args.gh_excluded_repos is not None:
            excluded_repos = args.gh_excluded_repos.split(",")

        getGHAlertsStatusReport(args.gh_org, repos=repos, excluded_repos=excluded_repos)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        error("Aborted.")
