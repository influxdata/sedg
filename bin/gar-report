#!/usr/bin/env python3
#
# SPDX-License-Identifier: MIT

# EXPERIMENTAL: this script subject to change

import argparse
import sys
import textwrap
from typing import List

from cvelib.common import error
from cvelib.gar import (
    _getGARRepos,
    _getGAROCIs,
    _getGARRepo,
    #    _getGARSecurityManifest,
)


def main():
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        prog="gar-report",
        description="Generate reports on security issues",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent(
            """\
Example usage:

$ gar-report --list-repos foo/us
bar
baz

$ gar-report --list-ocis foo/us
bar/norf
bar/corge
baz/qux

$ gar-report --get-repo-latest-digest foo/us/bar/norf
norf@sha256:5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
        """
        ),
    )
    parser.add_argument(
        "--list-repos",
        dest="list_repos",
        type=str,
        help="output GAR repos for PROJECT/LOCATION",
        default=None,
    )
    parser.add_argument(
        "--list-ocis",
        dest="list_ocis",
        type=str,
        help="output GAR OCIs for PROJECT/LOCATION",
        default=None,
    )
    parser.add_argument(
        "--get-repo-latest-digest",
        dest="get_repo_latest_digest",
        type=str,
        help="output GAR repo digest for PROJECT/LOCATION/REPO/NAME[:<tagsearch>]",
        default=None,
    )
    #    parser.add_argument(
    #        "--get-security-manifest",
    #        dest="get_security_manifest",
    #        type=str,
    #        help="output GAR security report for ORG/REPO@sha256:SHA256",
    #        default=None,
    #    )
    #    parser.add_argument(
    #        "--get-security-manifest-raw",
    #        dest="get_security_manifest_raw",
    #        type=str,
    #        help="output GAR raw security report for ORG/REPO@sha256:SHA256",
    #        default=None,
    #    )
    args: argparse.Namespace = parser.parse_args()

    # send to a report
    if args.list_repos:
        if "/" not in args.list_repos:
            error("please use PROJECT/LOCATION")

        proj, loc = args.list_repos.split("/", 2)
        repos: List[str] = _getGARRepos(proj, loc)
        for r in sorted(repos):
            print(r.split("/")[-1])  # trim off the proj/loc
    elif args.list_ocis:
        if "/" not in args.list_ocis:
            error("please use PROJECT/LOCATION")

        proj, loc = args.list_ocis.split("/", 2)
        repos: List[str] = _getGAROCIs(proj, loc)
        for r in sorted(repos):
            print(r.split("/", maxsplit=5)[-1])  # trim off the proj/loc
    elif args.get_repo_latest_digest:
        proj: str = ""
        loc: str = ""
        repo: str = ""
        name: str = ""
        tag: str = ""
        if "/" not in args.get_repo_latest_digest:
            error("please use PROJECT/LOCATION/REPO/NAME[:<tagsearch>]")

        proj, loc, repo, name = args.get_repo_latest_digest.split("/", 4)
        if ":" in name:
            name, tag = name.split(":", 2)
        digest: str = _getGARRepo(proj, loc, repo, name, tagsearch=tag)
        print(digest.split("/")[-1])  # trim off the proj/loc/repo


#    elif args.get_security_manifest:
#        if "/" not in args.get_security_manifest:
#            error("please use ORG/NAME")
#        s: str = _getGARSecurityManifest(args.get_security_manifest)
#        print("# %s report" % args.get_security_manifest)
#        print(s)
#    elif args.get_security_manifest_raw:
#        if "/" not in args.get_security_manifest_raw:
#            error("please use ORG/NAME")
#        s: str = _getGARSecurityManifest(args.get_security_manifest_raw, raw=True)
#        print(s)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
